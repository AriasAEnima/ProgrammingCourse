#!/usr/bin/env python3
"""
DEBUG SCRIPT para Windows - Verificar conexi√≥n Redis y cola
"""
import redis
import time
import json

def debug_redis_queue():
    """Debug completo de Redis y cola en Windows"""
    
    print("üîç DEBUGGING REDIS QUEUE EN WINDOWS")
    print("=" * 50)
    
    # 1. Test b√°sico de conexi√≥n
    print("\n1Ô∏è‚É£ TESTING CONEXI√ìN REDIS...")
    try:
        # Timeouts m√°s largos para Windows
        r = redis.Redis(
            host='localhost', 
            port=6379, 
            decode_responses=True,
            socket_connect_timeout=10,  # 10s timeout
            socket_timeout=10
        )
        
        # Test ping
        ping_result = r.ping()
        print(f"‚úÖ Ping Redis: {ping_result}")
        
        # Info b√°sica
        info = r.info()
        print(f"‚úÖ Redis version: {info.get('redis_version', 'unknown')}")
        print(f"‚úÖ Connected clients: {info.get('connected_clients', 'unknown')}")
        
    except Exception as e:
        print(f"‚ùå Error conectando Redis: {e}")
        print("üí° Verifica: docker-compose up -d")
        return
    
    # 2. Test de todas las colas/keys
    print("\n2Ô∏è‚É£ EXPLORANDO TODAS LAS KEYS...")
    try:
        all_keys = r.keys('*')
        print(f"üîë Total keys en Redis: {len(all_keys)}")
        
        # Mostrar keys relevantes
        queue_keys = [k for k in all_keys if 'queue' in k.lower()]
        task_keys = [k for k in all_keys if 'task' in k.lower()]
        worker_keys = [k for k in all_keys if 'worker' in k.lower()]
        
        print(f"üìã Queue keys: {queue_keys}")
        print(f"üìù Task keys: {len(task_keys)} total")
        print(f"üë• Worker keys: {worker_keys}")
        
    except Exception as e:
        print(f"‚ùå Error explorando keys: {e}")
    
    # 3. Test espec√≠fico de la cola principal
    print("\n3Ô∏è‚É£ TESTING COLA PRINCIPAL...")
    try:
        queue_name = 'image_tasks'  # Nombre correcto de la cola
        queue_length = r.llen(queue_name)
        print(f"üìä Cola '{queue_name}' length: {queue_length}")
        
        if queue_length > 0:
            print("‚úÖ HAY TAREAS EN LA COLA!")
            # Mostrar primeras tareas (sin sacarlas)
            first_tasks = r.lrange(queue_name, 0, 2)
            print(f"üéØ Primeras tareas: {first_tasks}")
        else:
            print("‚ö†Ô∏è COLA VAC√çA")
            
    except Exception as e:
        print(f"‚ùå Error consultando cola: {e}")
    
    # 4. Test de tareas en processing
    print("\n4Ô∏è‚É£ TESTING TAREAS EN PROCESSING...")
    try:
        task_keys = r.keys('task:*')
        processing_count = 0
        
        for task_key in task_keys:
            try:
                status = r.hget(task_key, 'status')
                if status == 'processing':
                    processing_count += 1
                    print(f"‚ö° Task {task_key}: {status}")
            except:
                continue
                
        print(f"üìä Total tareas processing: {processing_count}")
        
    except Exception as e:
        print(f"‚ùå Error consultando tasks: {e}")
    
    # 5. Test del m√©todo actual de metrics
    print("\n5Ô∏è‚É£ TESTING M√âTODO ACTUAL DE METRICS...")
    try:
        from simple_monitoring.metrics_collector import SimpleMetricsCollector
        collector = SimpleMetricsCollector()
        metrics = collector.collect_metrics()
        
        print(f"üìä Queue Length (m√©todo actual): {metrics.get('queue_length', 'ERROR')}")
        print(f"‚ö° Busy Workers: {metrics.get('busy_workers', 'ERROR')}")
        print(f"üìà Utilization: {metrics.get('worker_utilization', 'ERROR')}")
        
    except Exception as e:
        print(f"‚ùå Error con metrics collector: {e}")
        
    print("\n" + "=" * 50)
    print("‚úÖ DEBUG COMPLETO - Revisa resultados arriba")

if __name__ == "__main__":
    debug_redis_queue()